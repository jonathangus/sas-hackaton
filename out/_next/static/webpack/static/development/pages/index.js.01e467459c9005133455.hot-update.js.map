{"version":3,"file":"static/webpack/static/development/pages/index.js.01e467459c9005133455.hot-update.js","sources":["webpack:///./src/stores/UiStore.js"],"sourcesContent":["import { observable, action, runInAction } from 'mobx';\nimport months from '../constants/months';\nimport emitter from '../uiEmitter';\nimport mapInstance from '../mapInstance';\nimport get from 'lodash/get';\nimport moment from 'moment';\nimport regions from '../constants/regions';\nimport destinations from '../../tmp/destinations.json';\n\nmoment.locale('sv');\nlet origins = mapDestinations(destinations.filter(d => d.coordinates));\n\nconst points = {};\n\nconst mapDestinations = destinations => {\n  return destinations.map(destination => {\n    const { flightProducts = [] } = destination;\n\n    const prices = {};\n    const bonuses = {};\n    let requiredPoints;\n\n    flightProducts.forEach(month => {\n      const m = moment(month.outBoundDate).format('MMM');\n      const price = get(month, 'lowestPrice.totalPrice');\n      const a = 60000 / 10000;\n      const requiredBonus = a * price;\n\n      if (price && !prices[m]) {\n        prices[m] = parseInt(price);\n        bonuses[m] = requiredBonus;\n        requiredPoints =\n          requiredBonus && Math.round(requiredBonus / 1000) * 1000;\n      }\n    });\n\n    return {\n      ...destination,\n      city: get(destination, 'location.cityName'),\n      prices,\n      bonuses,\n      requiredPoints\n    };\n  });\n};\n\nclass UiStore {\n  @observable\n  isPageLoading = true;\n  @observable\n  selectedDestination = null;\n  @observable\n  destinations = origins;\n  @observable\n  selectedMonth = months[0];\n\n  @observable\n  priceFilter = 13449;\n\n  @observable\n  showFlights = false;\n\n  user = {\n    points: 9130\n  };\n\n  @action\n  setSelectedMonth = month => {\n    this.selectedMonth = month;\n    this.setSelectedDestination(null);\n    mapInstance.removeCurrentMarker();\n\n    this.updateLocations();\n  };\n\n  fetchDestinations() {}\n\n  @action\n  setLoaded = () => {\n    this.isPageLoading = false;\n\n    setTimeout(() => {\n      emitter.emit('pageLoaded');\n      this.updateLocations();\n\n      const coords = this.destinations\n        .filter(d =>\n          regions[0].airports.includes(get(d, 'destinationAirport.code'))\n        )\n        .filter(d => d.coordinates);\n      // .map(d => [d.coordinates.latitude, d.coordinates.latitude]);\n\n      mapInstance.fitBounds(coords);\n      // TODO\n    }, 200);\n  };\n\n  updateLocations = () => {\n    const final = origins\n      .map(origin => {\n        const price = origin.prices[this.selectedMonth];\n        const bonus = origin.bonuses[this.selectedMonth];\n\n        let bonusProgress = (this.user.points / bonus) * 100;\n\n        if (price) {\n          bonusProgress = bonusProgress > 100 ? 100 : parseInt(bonusProgress);\n        }\n\n        return {\n          ...origin,\n          priceRaw: price,\n          price: price && `${price} ${origin.currency}`,\n          bonusProgress,\n          euroBonus: bonus\n        };\n      })\n      .filter(dest => dest.priceRaw && dest.priceRaw < this.priceFilter);\n\n    mapInstance.showLocations(final);\n  };\n\n  @action\n  setSelectedDestination(destination) {\n    this.selectedDestination = null;\n\n    setTimeout(() => {\n      this.selectedDestination = destination;\n      mapInstance.setDestination(destination);\n    }, 50);\n  }\n\n  @action\n  randomDestination = () => {\n    const destination = origins[Math.floor(Math.random() * origins.length)];\n    this.setSelectedDestination(destination);\n  };\n\n  @action\n  toggleModdal = () => {\n    this.showFlights = !this.showFlights;\n  };\n\n  @action\n  clearSelected = () => {\n    this.setSelectedDestination(null);\n    mapInstance.removeCurrentMarker();\n  };\n\n  @action\n  setPriceFilter = value => {\n    this.clearSelected();\n    this.priceFilter = value;\n    this.updateLocations();\n  };\n\n  @action\n  focusRegion = regions => {\n    this.setSelectedDestination(null);\n    mapInstance.removeCurrentMarker();\n\n    const coords = this.destinations\n      .filter(d => regions.includes(get(d, 'destinationAirport.code')))\n      .filter(d => d.coordinates);\n    // .map(d => [d.coordinates.latitude, d.coordinates.latitude]);\n\n    mapInstance.fitBounds(coords);\n  };\n}\n\nexport default new UiStore();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAgBA;AACA;AADA;AACA;;;;;AAkCA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAEA;AACA;AACA;;;;;;;;;;;;;;AA9CA;;;AAgDA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;;;;AAnFA;;;;;AACA;;AACA;;;;;AACA;;AACA;;;;;AACA;;AACA;;;;;AACA;;AAEA;;;;;AACA;;AAEA;;;;;AACA;;AAMA;;;;;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;AAIA;;;;;;;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AAEA;AACA;;AA2BA;;;;;;;AAWA;AACA;AACA;AAAA;AACA;;AAEA;;;;;;;AACA;AACA;AACA;;AAEA;;;;;;;AACA;AACA;AACA;AAAA;AACA;;AAEA;;;;;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;;AAEA;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;A","sourceRoot":""}